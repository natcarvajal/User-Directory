{"version":3,"sources":["components/SearchForm.js","components/Header.js","components/ResultList.js","utils/API.js","components/SearchResultContainer.js","App.js","reportWebVitals.js","index.js"],"names":["SearchForm","props","className","htmlFor","onChange","handleInputChange","value","search","name","type","placeholder","id","onClick","handleFormSubmit","handleSort","Header","ResultList","results","length","map","result","alt","title","src","picture","large","first","last","email","cell","axios","get","SearchResultContainer","state","filteredUsers","sortedUsers","error","searchEmployees","newFilteredUsers","filter","user","toLowerCase","console","log","setState","event","target","preventDefault","sortArray","sort","a","b","API","then","res","data","catch","err","this","button_label","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0200a7db.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction SearchForm(props) {\n  return (\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Search:</label>\n        <input\n          onChange={props.handleInputChange}\n          value={props.search}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search Employee\"\n          id=\"search\"\n        />\n        <button\n          onClick={props.handleFormSubmit}\n          className=\"btn btn-primary mt-3\"\n        >\n          {\" \"}\n          Search\n        </button>{\" \"}\n        <button onClick={props.handleSort} className=\"btn btn-primary mt-3\">\n          {\" \"}\n          Sort by Name\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\nimport SearchForm from \"./SearchForm\";\n\nfunction Header() {\n  return (\n    <div className=\"jumbotron\">\n      <h1 className=\"display-4 text-center\">Employee Directory</h1>\n      <p className=\"lead text-center\">\n        Type in search bar below for an employee's name.\n      </p>\n      <p className=\"lead text-center\">\n        Click the <i>Sort by Name</i> button to toggle names in\n        ascending/descending order.\n      </p>\n      ;\n    </div>\n  );\n}\n\nexport default Header;\n{\n}\n","import React from \"react\";\n\nfunction ResultList(props) {\n  return (\n    <ul className=\"list-group\">\n      {props.results.length\n        ? props.results.map((result) => (\n            <li className=\"list-group-item\" key={result.id}>\n              <img\n                alt={result.title}\n                className=\"img-fluid\"\n                src={result.picture.large}\n              />\n\n              <li>\n                Name: {result.name.first} {result.name.last}\n              </li>\n              <li> Address: {result.email}</li>\n              <li> Email: {result.email}</li>\n              <li> Cell: {result.cell}</li>\n            </li>\n          ))\n        : \"\"}\n    </ul>\n  );\n}\n\nexport default ResultList;\n\n// line9: {JSON.stringify(result)}\n\n// [props.value_for_show]\n","import axios from \"axios\";\n\nconst URL =\n  \"https://randomuser.me/api/?results=10&inc=picture,name,location,cell,email&nat=us\";\n\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\nexport default {\n  getUsers: function () {\n    return axios.get(URL);\n  },\n};\n","import React, { Component } from \"react\";\nimport SearchForm from \"./SearchForm\";\nimport ResultList from \"./ResultList\";\nimport API from \"../utils/API\";\n\nclass SearchResultContainer extends Component {\n  state = {\n    search: \"\",\n    results: [],\n    filteredUsers: [],\n    sortedUsers: false,\n    error: \"\",\n  };\n\n  // When this component mounts, search the Giphy API for pictures of kittens\n  componentDidMount() {\n    API.getUsers()\n      .then((res) => {\n        console.log(res.data.results);\n        this.setState({\n          results: res.data.results,\n          search: \"\",\n          filteredUsers: res.data.results,\n        });\n      })\n      .catch((err) => this.setState({ error: err, ...this.state }));\n  }\n\n  searchEmployees = () => {\n    var newFilteredUsers;\n    newFilteredUsers = this.state.results.filter((user) => {\n      if (user.name.first.toLowerCase() === this.state.search.toLowerCase()) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    if (!this.state.search) {\n      newFilteredUsers = this.state.results;\n    }\n    console.log(this.state.search);\n\n    this.setState({ filteredUsers: newFilteredUsers });\n  };\n\n  handleInputChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  // When the form is submitted, search the Giphy API for `this.state.search`\n  handleFormSubmit = (event) => {\n    // This is where I would filter.\n    // Maybe filter the results by this.state.search\n    // idk ///\n    event.preventDefault();\n    this.searchEmployees(this.state.search);\n  };\n\n  handleSort = (event) => {\n    event.preventDefault();\n    var sortArray;\n    if (this.state.sortedUsers === false) {\n      sortArray = this.state.results.sort(function (a, b) {\n        if (a.name.first < b.name.first) {\n          return -1;\n        }\n        if (a.name.first > b.name.first) {\n          return 1;\n        }\n        return 0;\n      });\n    } else {\n      sortArray = this.state.results.sort(function (a, b) {\n        if (a.name.first < b.name.first) {\n          return 1;\n        }\n        if (a.name.first > b.name.first) {\n          return -1;\n        }\n        return 0;\n      });\n    }\n\n    this.setState({\n      results: sortArray,\n      sortedUsers: !this.state.sortedUsers,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <SearchForm\n          search={this.state.search}\n          handleFormSubmit={this.handleFormSubmit}\n          handleInputChange={this.handleInputChange}\n          button_label={this.state.search}\n          handleSort={this.handleSort}\n        />\n        <ResultList results={this.state.filteredUsers} />\n      </div>\n    );\n  }\n}\n\nexport default SearchResultContainer;\n\n// value_for_show={\"last\"}\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Header from \"./components/Header\";\nimport SearchResultContainer from \"./components/SearchResultContainer\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <SearchResultContainer />\n    </>\n  );\n}\n\nexport default App;\n\n// Given a table of random users generated from the Random User API, when the user loads the page, a table of employees should render.\n// The user should be able to:\n\n// Sort the table by at least one category\n\n// Filter the users by at least one property.\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}